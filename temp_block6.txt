            updateBoss(time, delta) {
                if (!this.boss || !this.boss.active) return;
                // Horizontal sweep with bounce
                // Maintain a constant Y to avoid drift from any physics side-effects
                this.boss.y = this.bossHomeY;
                // Horizontal movement handled by tween; no manual increment
                // Clamp and bounce â€“ prevents drifting off-screen due to large deltas
                const minX = 40, maxX = 760;
                if (this.boss.x > maxX) { this.boss.x = maxX; }
                if (this.boss.x < minX) { this.boss.x = minX; }
                // Enforce visibility and draw order (defensive)
                if (!this.boss.visible) this.boss.setVisible(true);
                if (this.boss.alpha !== 1) this.boss.setAlpha(1);
                if (this.boss.depth < 50) this.boss.setDepth(50);
                // Keep body in sync and zero out any stray velocity
                if (this.boss.body) {
                    this.boss.body.x = this.boss.x - (this.boss.body.width * 0.5);
                    this.boss.body.y = this.boss.y - (this.boss.body.height * 0.5);
                    this.boss.body.velocity.x = 0;
                    this.boss.body.velocity.y = 0;
                }
                // Failsafe: if boss somehow goes far out of view, pull it back to center
                if (this.boss.x < -100 || this.boss.x > 900 || this.boss.y < -100 || this.boss.y > 700) {
                    this.boss.x = 400;
                    this.boss.y = this.bossHomeY;
                    // Do not restart the tween; let it continue to avoid visible jumps
                    if (this.boss.body) {
                        if (this.boss.body.reset) this.boss.body.reset(this.boss.x, this.boss.y);
                        this.boss.body.velocity.x = 0;
                        this.boss.body.velocity.y = 0;
                    }
                    this.boss.setVisible(true).setActive(true);
                }

                // Fire patterns alternating: aimed shots and spread
                if (time > this.bossFireTimer) {
                    const pattern = (Math.floor(time / 2000) % 2);
                    if (pattern === 0) {
                        // Aimed triple burst
                        for (let i = -1; i <= 1; i++) {
